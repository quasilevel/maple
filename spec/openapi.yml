openapi: 3.0.0

info:
  title: Maple
  description: |
    An API to store links to the music, that the user likes, over the cloud.
    Allowing the user to safekeep the music he likes, organize them with tags and search through them

  version: 0.0.1

paths:
  /music:
    post:
      tags:
        - Maintaining
      description: ""
      summary: adds a song to the storage
      requestBody:
        $ref: "#/components/requestBodies/MusicDataJson"

      responses:
        "200":
          description: the request was successful BUT the music data was not added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    enum:
                      - music data by the given url already exists
        
        "201":
          description: the request was successful and the `id`` for the added music is returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string

        "400":
          description: the request is malformed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: music url was not found in the request body
                    
    get:
      tags:
        - Searching
      description: ""
      summary: returns a paginated list of all the songs
      parameters:
        - name: size
          in: query
          description: the number of music items to be returned
          schema:
            type: integer
            minimum: 5
            maximum: 10
            default: 5
        - name: start
          in: query
          description: the starting offset
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  _link:
                    type: object
                    properties:
                      next:
                        type: string
                      prev:
                        type: string
                  music:
                    type: array
                    items:
                      $ref: "#/components/schemas/Music"
        "404":
          description: there are no items for the given `size` and `start`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"

  /music/{id}:
    get: # gets the info about the song for the given id
      tags:
        - Maintaining
      description: ""
      summary: gets the info about the song for the given id
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: the music was found the music object is returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Music"

        "404":
          $ref: "#/components/responses/MusicNotFoundJson"

    put:
      tags:
        - Maintaining
      description: ""
      summary: replaces the music data with the one in request body
      parameters:
        - $ref: "#/components/parameters/Id"
      requestBody:
        $ref: "#/components/requestBodies/MusicDataJson"
      responses:
        "200":
          description: the music data was successfully replaced, the new music object is returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Music"
        "404":
          $ref: "#/components/responses/MusicNotFoundJson"

    delete: # deletes a song by the given id
      tags:
        - Maintaining
      description: ""
      summary: deletes a song by the given id
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: the music was successfully deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "204":
          description: the music was either already deleted or didn't existed in the first place
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"

  /music/tags:
    get:
      tags:
        - Tagging
      description: ""
      summary: gets a list of all the tags
      responses:
        "200":
          description: an array of tags is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"

  /music/{tag}:
    get: # gets all the songs by the given tag
      tags:
        - Tagging
        - Searching
      description: ""
      summary: gets all the music by the given tag
      parameters:
        - name: tag
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: an array of music objects with the given tag is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Music"
        "404":
          description: there are no music objects that has the given tag
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"

  /music/search:
    get: # searches through the user's music in a feasibly smart way
      tags:
      - Searching
      description: ""
      summary: searches through the user's music in a feasibly smart way
      parameters:
        - name: q # short for query
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: an array of relevant music objects is returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Music"
        "404":
          description: no music was found by the given query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"

components:
  schemas:
    Tag:
      type: object
      properties:
        value:
          type: string
    
    MusicMeta:
      type: object
      properties:
        timestamp:
          type: integer
          format: int64
        client:
          type: string

    MusicData:
      type: object
      properties:
        url:
          type: string
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"

    Music:
      type: object
      properties:
        id:
          type: string
        data:
          $ref: "#/components/schemas/MusicData"
        meta:
          $ref: "#/components/schemas/MusicMeta"

    Message:
      type: object
      properties:
        message:
          type: string

  parameters:
    Id:
      name: id
      in: path
      description: the id of the music for which info is solicited
      required: true
      schema:
        type: string

  requestBodies:
    MusicDataJson:
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/MusicData"
              client:
                type: string

  responses:
    MusicNotFoundJson:
      description: the music was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Message"